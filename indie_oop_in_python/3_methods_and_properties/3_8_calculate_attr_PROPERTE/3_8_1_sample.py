import time

# Во всех этих примерах значения вычисляемых атрибутов не хранятся в памяти,
# а сами вычисления начинаются только в момент обращения к атрибуту. Поэтому
# такие атрибуты можно назвать «ленивыми»
#     Ленивое вычисление (lazy evaluation) — это стратегия вычислений, при
# которой вычисления откладываются до момента, когда результат действительно
# потребуется. В контексте программирования это означает, что код не выполняет
# вычисления немедленно, как только они становятся доступными, а откладывает
# их выполнение до фактического запроса значения.
#
# «Ленивое » свойство может отложить вычисление атрибута до момента
# необходимости, что может сделать ваши программы более эффективными.
#
# Однако вы можете столкнуться с часто используемыми атрибутами или такими,
# чье вычисление значения занимает продолжительное время. Тогда обращение к
# таким вычисляемым атрибутам каждый раз может быть дорогостоящим и
# расточительным. Хорошая стратегия в таком случае состоит в использовании
# кэширования значений после завершения вычислений.


class Square:
    def __init__(self, s):
        self.__side = s
        self.__area = None

    @property
    def side(self):
        return self.__side

    @side.setter
    def side(self, side):
        self.__side = side
        self.__area = None

    @property
    def area(self):
        if self.__area is None:
            print("Calculate area...")
            time.sleep(0.5)
            self.__area = self.side**2
        return self.__area


sq = Square(4)
print(sq.area)
print(sq.area)
sq.side = 5
print(sq.side, sq.area)
print(sq.area)
